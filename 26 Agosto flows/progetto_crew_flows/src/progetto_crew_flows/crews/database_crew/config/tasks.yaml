create_qdrant_database_task:
  description: >
    Create and populate a Qdrant vector database with documents for the specified domain.
    
    Database Configuration:
    - Subject: "{subject}"
    - Topic: "{topic}" 
    - Database type: "{database_type}"
    - Collection name: "{collection_name}"
    
    Process:
    1. Use recreate_collection_for_rag to establish the database collection (vector_size=1536)
    2. Use store_documents_in_qdrant to populate with relevant documents
    3. Verify database creation and document storage
    4. Report database statistics and configuration
    
    Parameters to use for recreate_collection_for_rag:
    - vector_size: 1536 (Azure OpenAI embedding dimension)
    - collection_name: "{collection_name}" (optional)
    
    Then call store_documents_in_qdrant() to populate the collection.
    
    Ensure the database is properly configured for both semantic search and text-based retrieval.
  expected_output: >
    JSON response containing database creation status, document count, collection configuration,
    and any relevant metadata about the created Qdrant database.
  agent: qdrant_specialist

create_faiss_database_task:
  description: >
    Create and populate a FAISS vector database with documents for the specified domain.
    
    Database Configuration:
    - Subject: "{subject}"
    - Topic: "{topic}"
    - Database type: "{database_type}"
    
    Process:
    1. Use create_vectordb to create the FAISS database structure
    2. Use store_individual_documents to populate with relevant documents
    3. Verify database creation and document storage
    4. Report database statistics and configuration
    
    Call create_vectordb() first, then store_individual_documents().
    
    Ensure the database is properly configured for semantic similarity search.
  expected_output: >
    JSON response containing database creation status, document count, chunks created,
    and database file location for the created FAISS database.
  agent: database_manager

execute_rag_retrieval_task:
  description: >
    Execute intelligent RAG retrieval using the most appropriate search strategy and database.
    
    Query Information:
    - Query: "{query}"
    - Subject: "{subject}"
    - Topic: "{topic}"
    - Database type: "{database_type}"
    - Available databases: {available_databases}
    
    Strategy Selection:
    1. If Qdrant is available and requested, use intelligent_rag_search (auto-strategy selection)
    2. For FAISS databases, use retrieve_from_vectordb
    3. For manual Qdrant control: qdrant_hybrid_search, qdrant_semantic_search, qdrant_text_search
    
    Call your chosen tool with these parameters:
    - query: "{query}"
    - topic: "{topic}"
    - subject: "{subject}"
    - k: 6 (for Qdrant tools)
    - limit: 12 (for FAISS tools)
    
    Return the complete tool output without modification.
  expected_output: >
    Complete search results from the selected tool, either as JSON response (Qdrant) 
    or structured text (FAISS) with documents and metadata.
  agent: rag_retrieval_specialist

format_rag_results_task:
  description: >
    Transform the retrieved RAG results into a comprehensive, well-structured guide.
    
    Input Processing:
    Take the complete output from the previous RAG retrieval task and format it using format_content_as_guide.
    The previous task returned detailed search results that need to be properly formatted.
    
    Parameters:
    - retrieved_info: {execute_rag_retrieval_task}
    - query: "{query}"
    - topic: "{topic}"
    - subject: "{subject}"
    
    Output Requirements:
    - Return ONLY the clean JSON from the tool
    - No markdown formatting or wrapper text
    - Pure JSON starting with {{ and ending with }}
    
    The tool will automatically detect the input format and create an appropriate GuideOutline structure.
  expected_output: >
    Clean JSON string representing a complete GuideOutline object with title, introduction,
    target_audience, sections array, and conclusion.
  agent: content_formatter
  context:
    - execute_rag_retrieval_task